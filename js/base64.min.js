var e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e;
} : function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
};

!function(t) {
    if ("object" == ("undefined" == typeof exports ? "undefined" : e(exports)) && null != exports && "number" != typeof exports.nodeType) module.exports = t(); else if ("function" == typeof define && null != define.amd) define([], t); else {
        var o = t(), n = "undefined" != typeof self ? self : $.global;
        "function" != typeof n.btoa && (n.btoa = o.btoa), "function" != typeof n.atob && (n.atob = o.atob);
    }
}(function() {
    function e(e) {
        this.message = e;
    }
    var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return (e.prototype = new Error()).name = "InvalidCharacterError", {
        btoa: function(o) {
            for (var n, r, f = String(o), i = 0, a = t, c = ""; f.charAt(0 | i) || (a = "=", 
            i % 1); c += a.charAt(63 & n >> 8 - i % 1 * 8)) {
                if (255 < (r = f.charCodeAt(i += .75))) throw new e("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
                n = n << 8 | r;
            }
            return c;
        },
        atob: function(o) {
            var n = String(o).replace(/[=]+$/, "");
            if (n.length % 4 == 1) throw new e("'atob' failed: The string to be decoded is not correctly encoded.");
            for (var r, f, i = 0, a = 0, c = ""; f = n.charAt(a++); ~f && (r = i % 4 ? 64 * r + f : f, 
            i++ % 4) && (c += String.fromCharCode(255 & r >> (-2 * i & 6)))) f = t.indexOf(f);
            return c;
        }
    };
});